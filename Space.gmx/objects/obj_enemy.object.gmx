<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Intialize Variables
hp = 5
scrap_value = random_range(1, 3)
has_route = false
route = noone

spd = 1
x_spd = 0
y_spd = 0
acel = .1
max_spd = 4

turn_spd = 5

enum state {
    patrol, 
    aggro
}
e_state = state.patrol
aggro_range = 350  
break_range = 500

dest = noone
dest_num = 1

// Test variables


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i = 0; i &lt; scrap_value; i += 1) {
    scrap = instance_create(x, y, obj_scrap)
    scrap.speed = random_range(1,3)
    scrap.direction = random_range(0,360)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enemy controls

//Get route if needed
if e_state = state.patrol and has_route = false {
    self.route = scr_create_route()
    self.has_route = true
    self.dest = route[1]
}

//Change state to aggro if player in range
if e_state != state.aggro {
    player = instance_nearest(self.x, self.y, obj_player)
    if player != noone {
        range = point_distance(self.x, self.y, player.x, player.y)
        
        if range &lt; aggro_range {
            e_state = state.aggro
            scr_destroy_route(route)
            self.route = noone
            self.has_route = false
            self.dest = player
        }
    }
}

//Movement Controls
if dest != noone {
    //X Movement
    x_dir = sign(dest.x - x)
    x_spd += x_dir * acel
    if x_spd &gt;  max_spd {x_spd =  max_spd}
    if x_spd &lt; -max_spd {x_spd = -max_spd}
    self.x += x_spd
    
    //Y Movement
    y_dir = sign(dest.y - y) 
    y_spd += y_dir * acel
    if y_spd &gt;  max_spd {y_spd =  max_spd}
    if y_spd &lt; -max_spd {y_spd = -max_spd}
    self.y += y_spd
    
    //Rotate to destination
    dest_angle = point_direction(x, y, dest.x, dest.y) + 90
    if image_angle != dest_angle {
        angle_dir = scr_shortest_rotation(image_angle, dest_angle)
        image_angle += angle_dir * turn_spd
    }
}

switch e_state {
    case state.patrol:
        dest_switch_range = 100 //Radius of destination
        
        //Check if in x range of route destination
        x_range = false
        if (dest.x - dest_switch_range &lt; x) and (x &lt; dest.x + dest_switch_range) {
            x_range = true
        }
        
        //Check if in y range of route destination
        y_range = false
        if (dest.y - dest_switch_range &lt; y) and (y &lt; dest.y + dest_switch_range) {
            y_range = true
        }
        
        //Switch destination if in range
        if x_range and y_range {
            if dest_num &lt; route[0] {
                dest = route[dest_num + 1]
                dest_num += 1   
            }
            else {
                dest = route[1]
                dest_num = 1
            }
        }
    break
    case state.aggro:
        if player != noone {
            range = point_distance(self.x, self.y, player.x, player.y)
            if range &gt; break_range {
                e_state = state.patrol
            }
        }
    break
}

//Kill if out of hp
if hp &lt; 1 {
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()

/* Show Route Lines

if self.route != noone {
    points = route[0]
    for (i = 1; i &lt;= points; i += 1) {
        draw_line_color(route[i].x, route[i].y, route[i + 1].x, route[i + 1].y, c_white, c_white)
    }
   
    draw_line_color(route[dest_num].x, route[dest_num].y, self.x, self.y, c_white, c_white)
}

draw_circle_color(self.x, self.y, 350, c_red, c_red, true)
draw_circle_color(self.x, self.y, 500, c_green, c_green, true)
draw_text(x, y - 32, string(e_state))
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
